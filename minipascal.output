State 121 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 $@1: %empty

    2 $@2: %empty

    3 program: $@1 PROG ID SEMICOLON $@2 block PERIOD

    4 $@3: %empty

    5 declaration: VAR $@3 ID declaration_prime COLON type

    6 $@4: %empty

    7 $@5: %empty

    8 $@6: %empty

    9 $@7: %empty

   10 declaration: PROC $@4 ID LP $@5 parameters RP $@6 SEMICOLON $@7 block

   11 $@8: %empty

   12 $@9: %empty

   13 $@10: %empty

   14 $@11: %empty

   15 declaration: FUNC $@8 ID LP $@9 parameters RP $@10 COLON type SEMICOLON $@11 block

   16 declaration_prime: COMMA ID declaration_prime
   17                  | %empty

   18 parameters: ID COLON type parameters_prime
   19           | VAR ID COLON type parameters_prime
   20           | %empty

   21 parameters_prime: COMMA ID COLON type
   22                 | COMMA VAR ID COLON type
   23                 | %empty

   24 type: DATATYPE
   25     | array_type

   26 array_type: ARR LS RS OF DATATYPE
   27           | ARR LS expr RS OF DATATYPE

   28 block: BEG statement block_prime END

   29 block_prime: SEMICOLON statement block_prime
   30            | SEMICOLON
   31            | %empty

   32 $@12: %empty

   33 statement: $@12 structured_statement
   34          | simple_statement
   35          | declaration

   36 simple_statement: assignment_statement
   37                 | call
   38                 | return_statement
   39                 | read_statement
   40                 | write_statement
   41                 | assert_statement

   42 assignment_statement: variable ASSGN expr

   43 $@13: %empty

   44 $@14: %empty

   45 call: ID LP $@13 arguments $@14 RP

   46 arguments: expr arguments_prime
   47          | %empty

   48 arguments_prime: COMMA expr arguments_prime
   49                | %empty

   50 return_statement: RETURN
   51                 | RETURN expr

   52 $@15: %empty

   53 read_statement: READ LP $@15 variable read_statement_prime RP

   54 read_statement_prime: COMMA variable read_statement_prime
   55                     | %empty

   56 $@16: %empty

   57 write_statement: WRITELN LP $@16 arguments RP

   58 $@17: %empty

   59 assert_statement: ASSERT LP $@17 expr RP

   60 structured_statement: block
   61                     | if_statement
   62                     | while_statement

   63 if_statement: IF expr THEN statement
   64             | IF expr THEN statement ELSE statement

   65 while_statement: WHILE expr DO statement

   66 expr: simple_expr
   67     | simple_expr RELOP simple_expr

   68 simple_expr: term simple_expr_prime
   69            | ADDOP term simple_expr_prime

   70 simple_expr_prime: add_operator term simple_expr_prime
   71                  | %empty

   72 term: factor term_prime

   73 term_prime: MULOP factor term_prime
   74           | %empty

   75 factor: call
   76       | variable
   77       | literal
   78       | LP expr RP
   79       | NOT factor
   80       | ID PERIOD SIZE

   81 variable: ID
   82         | ID LS expr RS

   83 add_operator: ADDOP
   84             | OR

   85 literal: INTEGER
   86        | real_literal
   87        | STRING_LITERAL

   88 real_literal: INTEGER PERIOD INTEGER
   89             | INTEGER PERIOD INTEGER "e" INTEGER
   90             | INTEGER PERIOD INTEGER "e" ADDOP INTEGER


Terminals, with rules where they appear

$end (0) 0
error (256)
BEG (258) 28
PROG (259) 3
FUNC (260) 15
PROC (261) 10
INTEGER (262) 85 88 89 90
ID (263) 3 5 10 15 16 18 19 21 22 45 80 81 82
SEMICOLON (264) 3 10 15 29 30
PERIOD (265) 3 80 88 89 90
VAR (266) 5 19 22
COLON (267) 5 15 18 19 21 22
LP (268) 10 15 45 53 57 59 78
RP (269) 10 15 45 53 57 59 78
LS (270) 26 27 82
RS (271) 26 27 82
COMMA (272) 16 21 22 48 54
ARR (273) 26 27
OF (274) 26 27
IF (275) 63 64
THEN (276) 63 64
ELSE (277) 64
END (278) 28
ASSGN (279) 42
RETURN (280) 50 51
READ (281) 53
WRITELN (282) 57
ASSERT (283) 59
WHILE (284) 65
DO (285) 65
RELOP (286) 67
ADDOP (287) 69 83 90
OR (288) 84
MULOP (289) 73
NOT (290) 79
STRING_LITERAL (291) 87
SIZE (292) 80
DATATYPE (293) 24 26 27
"e" (294) 89 90


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
program (41)
    on left: 3, on right: 0
$@1 (42)
    on left: 1, on right: 3
$@2 (43)
    on left: 2, on right: 3
declaration (44)
    on left: 5 10 15, on right: 35
$@3 (45)
    on left: 4, on right: 5
$@4 (46)
    on left: 6, on right: 10
$@5 (47)
    on left: 7, on right: 10
$@6 (48)
    on left: 8, on right: 10
$@7 (49)
    on left: 9, on right: 10
$@8 (50)
    on left: 11, on right: 15
$@9 (51)
    on left: 12, on right: 15
$@10 (52)
    on left: 13, on right: 15
$@11 (53)
    on left: 14, on right: 15
declaration_prime (54)
    on left: 16 17, on right: 5 16
parameters (55)
    on left: 18 19 20, on right: 10 15
parameters_prime (56)
    on left: 21 22 23, on right: 18 19
type (57)
    on left: 24 25, on right: 5 15 18 19 21 22
array_type (58)
    on left: 26 27, on right: 25
block (59)
    on left: 28, on right: 3 10 15 60
block_prime (60)
    on left: 29 30 31, on right: 28 29
statement (61)
    on left: 33 34 35, on right: 28 29 63 64 65
$@12 (62)
    on left: 32, on right: 33
simple_statement (63)
    on left: 36 37 38 39 40 41, on right: 34
assignment_statement (64)
    on left: 42, on right: 36
call (65)
    on left: 45, on right: 37 75
$@13 (66)
    on left: 43, on right: 45
$@14 (67)
    on left: 44, on right: 45
arguments (68)
    on left: 46 47, on right: 45 57
arguments_prime (69)
    on left: 48 49, on right: 46 48
return_statement (70)
    on left: 50 51, on right: 38
read_statement (71)
    on left: 53, on right: 39
$@15 (72)
    on left: 52, on right: 53
read_statement_prime (73)
    on left: 54 55, on right: 53 54
write_statement (74)
    on left: 57, on right: 40
$@16 (75)
    on left: 56, on right: 57
assert_statement (76)
    on left: 59, on right: 41
$@17 (77)
    on left: 58, on right: 59
structured_statement (78)
    on left: 60 61 62, on right: 33
if_statement (79)
    on left: 63 64, on right: 61
while_statement (80)
    on left: 65, on right: 62
expr (81)
    on left: 66 67, on right: 27 42 46 48 51 59 63 64 65 78 82
simple_expr (82)
    on left: 68 69, on right: 66 67
simple_expr_prime (83)
    on left: 70 71, on right: 68 69 70
term (84)
    on left: 72, on right: 68 69 70
term_prime (85)
    on left: 73 74, on right: 72 73
factor (86)
    on left: 75 76 77 78 79 80, on right: 72 73 79
variable (87)
    on left: 81 82, on right: 42 53 54 76
add_operator (88)
    on left: 83 84, on right: 70
literal (89)
    on left: 85 86 87, on right: 77
real_literal (90)
    on left: 88 89 90, on right: 86


State 0

    0 $accept: . program $end

    $default  reduce using rule 1 ($@1)

    program  go to state 1
    $@1      go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    3 program: $@1 . PROG ID SEMICOLON $@2 block PERIOD

    PROG  shift, and go to state 4


State 3

    0 $accept: program $end .

    $default  accept


State 4

    3 program: $@1 PROG . ID SEMICOLON $@2 block PERIOD

    ID  shift, and go to state 5


State 5

    3 program: $@1 PROG ID . SEMICOLON $@2 block PERIOD

    SEMICOLON  shift, and go to state 6


State 6

    3 program: $@1 PROG ID SEMICOLON . $@2 block PERIOD

    $default  reduce using rule 2 ($@2)

    $@2  go to state 7


State 7

    3 program: $@1 PROG ID SEMICOLON $@2 . block PERIOD

    BEG  shift, and go to state 8

    block  go to state 9


State 8

   28 block: BEG . statement block_prime END

    FUNC     shift, and go to state 10
    PROC     shift, and go to state 11
    ID       shift, and go to state 12
    VAR      shift, and go to state 13
    RETURN   shift, and go to state 14
    READ     shift, and go to state 15
    WRITELN  shift, and go to state 16
    ASSERT   shift, and go to state 17

    $default  reduce using rule 32 ($@12)

    declaration           go to state 18
    statement             go to state 19
    $@12                  go to state 20
    simple_statement      go to state 21
    assignment_statement  go to state 22
    call                  go to state 23
    return_statement      go to state 24
    read_statement        go to state 25
    write_statement       go to state 26
    assert_statement      go to state 27
    variable              go to state 28


State 9

    3 program: $@1 PROG ID SEMICOLON $@2 block . PERIOD

    PERIOD  shift, and go to state 29


State 10

   15 declaration: FUNC . $@8 ID LP $@9 parameters RP $@10 COLON type SEMICOLON $@11 block

    $default  reduce using rule 11 ($@8)

    $@8  go to state 30


State 11

   10 declaration: PROC . $@4 ID LP $@5 parameters RP $@6 SEMICOLON $@7 block

    $default  reduce using rule 6 ($@4)

    $@4  go to state 31


State 12

   45 call: ID . LP $@13 arguments $@14 RP
   81 variable: ID .
   82         | ID . LS expr RS

    LP  shift, and go to state 32
    LS  shift, and go to state 33

    $default  reduce using rule 81 (variable)


State 13

    5 declaration: VAR . $@3 ID declaration_prime COLON type

    $default  reduce using rule 4 ($@3)

    $@3  go to state 34


State 14

   50 return_statement: RETURN .
   51                 | RETURN . expr

    INTEGER         shift, and go to state 35
    ID              shift, and go to state 36
    LP              shift, and go to state 37
    ADDOP           shift, and go to state 38
    NOT             shift, and go to state 39
    STRING_LITERAL  shift, and go to state 40

    $default  reduce using rule 50 (return_statement)

    call          go to state 41
    expr          go to state 42
    simple_expr   go to state 43
    term          go to state 44
    factor        go to state 45
    variable      go to state 46
    literal       go to state 47
    real_literal  go to state 48


State 15

   53 read_statement: READ . LP $@15 variable read_statement_prime RP

    LP  shift, and go to state 49


State 16

   57 write_statement: WRITELN . LP $@16 arguments RP

    LP  shift, and go to state 50


State 17

   59 assert_statement: ASSERT . LP $@17 expr RP

    LP  shift, and go to state 51


State 18

   35 statement: declaration .

    $default  reduce using rule 35 (statement)


State 19

   28 block: BEG statement . block_prime END

    SEMICOLON  shift, and go to state 52

    $default  reduce using rule 31 (block_prime)

    block_prime  go to state 53


State 20

   33 statement: $@12 . structured_statement

    BEG    shift, and go to state 8
    IF     shift, and go to state 54
    WHILE  shift, and go to state 55

    block                 go to state 56
    structured_statement  go to state 57
    if_statement          go to state 58
    while_statement       go to state 59


State 21

   34 statement: simple_statement .

    $default  reduce using rule 34 (statement)


State 22

   36 simple_statement: assignment_statement .

    $default  reduce using rule 36 (simple_statement)


State 23

   37 simple_statement: call .

    $default  reduce using rule 37 (simple_statement)


State 24

   38 simple_statement: return_statement .

    $default  reduce using rule 38 (simple_statement)


State 25

   39 simple_statement: read_statement .

    $default  reduce using rule 39 (simple_statement)


State 26

   40 simple_statement: write_statement .

    $default  reduce using rule 40 (simple_statement)


State 27

   41 simple_statement: assert_statement .

    $default  reduce using rule 41 (simple_statement)


State 28

   42 assignment_statement: variable . ASSGN expr

    ASSGN  shift, and go to state 60


State 29

    3 program: $@1 PROG ID SEMICOLON $@2 block PERIOD .

    $default  reduce using rule 3 (program)


State 30

   15 declaration: FUNC $@8 . ID LP $@9 parameters RP $@10 COLON type SEMICOLON $@11 block

    ID  shift, and go to state 61


State 31

   10 declaration: PROC $@4 . ID LP $@5 parameters RP $@6 SEMICOLON $@7 block

    ID  shift, and go to state 62


State 32

   45 call: ID LP . $@13 arguments $@14 RP

    $default  reduce using rule 43 ($@13)

    $@13  go to state 63


State 33

   82 variable: ID LS . expr RS

    INTEGER         shift, and go to state 35
    ID              shift, and go to state 36
    LP              shift, and go to state 37
    ADDOP           shift, and go to state 38
    NOT             shift, and go to state 39
    STRING_LITERAL  shift, and go to state 40

    call          go to state 41
    expr          go to state 64
    simple_expr   go to state 43
    term          go to state 44
    factor        go to state 45
    variable      go to state 46
    literal       go to state 47
    real_literal  go to state 48


State 34

    5 declaration: VAR $@3 . ID declaration_prime COLON type

    ID  shift, and go to state 65


State 35

   85 literal: INTEGER .
   88 real_literal: INTEGER . PERIOD INTEGER
   89             | INTEGER . PERIOD INTEGER "e" INTEGER
   90             | INTEGER . PERIOD INTEGER "e" ADDOP INTEGER

    PERIOD  shift, and go to state 66

    $default  reduce using rule 85 (literal)


State 36

   45 call: ID . LP $@13 arguments $@14 RP
   80 factor: ID . PERIOD SIZE
   81 variable: ID .
   82         | ID . LS expr RS

    PERIOD  shift, and go to state 67
    LP      shift, and go to state 32
    LS      shift, and go to state 33

    $default  reduce using rule 81 (variable)


State 37

   78 factor: LP . expr RP

    INTEGER         shift, and go to state 35
    ID              shift, and go to state 36
    LP              shift, and go to state 37
    ADDOP           shift, and go to state 38
    NOT             shift, and go to state 39
    STRING_LITERAL  shift, and go to state 40

    call          go to state 41
    expr          go to state 68
    simple_expr   go to state 43
    term          go to state 44
    factor        go to state 45
    variable      go to state 46
    literal       go to state 47
    real_literal  go to state 48


State 38

   69 simple_expr: ADDOP . term simple_expr_prime

    INTEGER         shift, and go to state 35
    ID              shift, and go to state 36
    LP              shift, and go to state 37
    NOT             shift, and go to state 39
    STRING_LITERAL  shift, and go to state 40

    call          go to state 41
    term          go to state 69
    factor        go to state 45
    variable      go to state 46
    literal       go to state 47
    real_literal  go to state 48


State 39

   79 factor: NOT . factor

    INTEGER         shift, and go to state 35
    ID              shift, and go to state 36
    LP              shift, and go to state 37
    NOT             shift, and go to state 39
    STRING_LITERAL  shift, and go to state 40

    call          go to state 41
    factor        go to state 70
    variable      go to state 46
    literal       go to state 47
    real_literal  go to state 48


State 40

   87 literal: STRING_LITERAL .

    $default  reduce using rule 87 (literal)


State 41

   75 factor: call .

    $default  reduce using rule 75 (factor)


State 42

   51 return_statement: RETURN expr .

    $default  reduce using rule 51 (return_statement)


State 43

   66 expr: simple_expr .
   67     | simple_expr . RELOP simple_expr

    RELOP  shift, and go to state 71

    $default  reduce using rule 66 (expr)


State 44

   68 simple_expr: term . simple_expr_prime

    ADDOP  shift, and go to state 72
    OR     shift, and go to state 73

    $default  reduce using rule 71 (simple_expr_prime)

    simple_expr_prime  go to state 74
    add_operator       go to state 75


State 45

   72 term: factor . term_prime

    MULOP  shift, and go to state 76

    $default  reduce using rule 74 (term_prime)

    term_prime  go to state 77


State 46

   76 factor: variable .

    $default  reduce using rule 76 (factor)


State 47

   77 factor: literal .

    $default  reduce using rule 77 (factor)


State 48

   86 literal: real_literal .

    $default  reduce using rule 86 (literal)


State 49

   53 read_statement: READ LP . $@15 variable read_statement_prime RP

    $default  reduce using rule 52 ($@15)

    $@15  go to state 78


State 50

   57 write_statement: WRITELN LP . $@16 arguments RP

    $default  reduce using rule 56 ($@16)

    $@16  go to state 79


State 51

   59 assert_statement: ASSERT LP . $@17 expr RP

    $default  reduce using rule 58 ($@17)

    $@17  go to state 80


State 52

   29 block_prime: SEMICOLON . statement block_prime
   30            | SEMICOLON .

    FUNC     shift, and go to state 10
    PROC     shift, and go to state 11
    ID       shift, and go to state 12
    VAR      shift, and go to state 13
    RETURN   shift, and go to state 14
    READ     shift, and go to state 15
    WRITELN  shift, and go to state 16
    ASSERT   shift, and go to state 17

    END       reduce using rule 30 (block_prime)
    $default  reduce using rule 32 ($@12)

    declaration           go to state 18
    statement             go to state 81
    $@12                  go to state 20
    simple_statement      go to state 21
    assignment_statement  go to state 22
    call                  go to state 23
    return_statement      go to state 24
    read_statement        go to state 25
    write_statement       go to state 26
    assert_statement      go to state 27
    variable              go to state 28


State 53

   28 block: BEG statement block_prime . END

    END  shift, and go to state 82


State 54

   63 if_statement: IF . expr THEN statement
   64             | IF . expr THEN statement ELSE statement

    INTEGER         shift, and go to state 35
    ID              shift, and go to state 36
    LP              shift, and go to state 37
    ADDOP           shift, and go to state 38
    NOT             shift, and go to state 39
    STRING_LITERAL  shift, and go to state 40

    call          go to state 41
    expr          go to state 83
    simple_expr   go to state 43
    term          go to state 44
    factor        go to state 45
    variable      go to state 46
    literal       go to state 47
    real_literal  go to state 48


State 55

   65 while_statement: WHILE . expr DO statement

    INTEGER         shift, and go to state 35
    ID              shift, and go to state 36
    LP              shift, and go to state 37
    ADDOP           shift, and go to state 38
    NOT             shift, and go to state 39
    STRING_LITERAL  shift, and go to state 40

    call          go to state 41
    expr          go to state 84
    simple_expr   go to state 43
    term          go to state 44
    factor        go to state 45
    variable      go to state 46
    literal       go to state 47
    real_literal  go to state 48


State 56

   60 structured_statement: block .

    $default  reduce using rule 60 (structured_statement)


State 57

   33 statement: $@12 structured_statement .

    $default  reduce using rule 33 (statement)


State 58

   61 structured_statement: if_statement .

    $default  reduce using rule 61 (structured_statement)


State 59

   62 structured_statement: while_statement .

    $default  reduce using rule 62 (structured_statement)


State 60

   42 assignment_statement: variable ASSGN . expr

    INTEGER         shift, and go to state 35
    ID              shift, and go to state 36
    LP              shift, and go to state 37
    ADDOP           shift, and go to state 38
    NOT             shift, and go to state 39
    STRING_LITERAL  shift, and go to state 40

    call          go to state 41
    expr          go to state 85
    simple_expr   go to state 43
    term          go to state 44
    factor        go to state 45
    variable      go to state 46
    literal       go to state 47
    real_literal  go to state 48


State 61

   15 declaration: FUNC $@8 ID . LP $@9 parameters RP $@10 COLON type SEMICOLON $@11 block

    LP  shift, and go to state 86


State 62

   10 declaration: PROC $@4 ID . LP $@5 parameters RP $@6 SEMICOLON $@7 block

    LP  shift, and go to state 87


State 63

   45 call: ID LP $@13 . arguments $@14 RP

    INTEGER         shift, and go to state 35
    ID              shift, and go to state 36
    LP              shift, and go to state 37
    ADDOP           shift, and go to state 38
    NOT             shift, and go to state 39
    STRING_LITERAL  shift, and go to state 40

    $default  reduce using rule 47 (arguments)

    call          go to state 41
    arguments     go to state 88
    expr          go to state 89
    simple_expr   go to state 43
    term          go to state 44
    factor        go to state 45
    variable      go to state 46
    literal       go to state 47
    real_literal  go to state 48


State 64

   82 variable: ID LS expr . RS

    RS  shift, and go to state 90


State 65

    5 declaration: VAR $@3 ID . declaration_prime COLON type

    COMMA  shift, and go to state 91

    $default  reduce using rule 17 (declaration_prime)

    declaration_prime  go to state 92


State 66

   88 real_literal: INTEGER PERIOD . INTEGER
   89             | INTEGER PERIOD . INTEGER "e" INTEGER
   90             | INTEGER PERIOD . INTEGER "e" ADDOP INTEGER

    INTEGER  shift, and go to state 93


State 67

   80 factor: ID PERIOD . SIZE

    SIZE  shift, and go to state 94


State 68

   78 factor: LP expr . RP

    RP  shift, and go to state 95


State 69

   69 simple_expr: ADDOP term . simple_expr_prime

    ADDOP  shift, and go to state 72
    OR     shift, and go to state 73

    $default  reduce using rule 71 (simple_expr_prime)

    simple_expr_prime  go to state 96
    add_operator       go to state 75


State 70

   79 factor: NOT factor .

    $default  reduce using rule 79 (factor)


State 71

   67 expr: simple_expr RELOP . simple_expr

    INTEGER         shift, and go to state 35
    ID              shift, and go to state 36
    LP              shift, and go to state 37
    ADDOP           shift, and go to state 38
    NOT             shift, and go to state 39
    STRING_LITERAL  shift, and go to state 40

    call          go to state 41
    simple_expr   go to state 97
    term          go to state 44
    factor        go to state 45
    variable      go to state 46
    literal       go to state 47
    real_literal  go to state 48


State 72

   83 add_operator: ADDOP .

    $default  reduce using rule 83 (add_operator)


State 73

   84 add_operator: OR .

    $default  reduce using rule 84 (add_operator)


State 74

   68 simple_expr: term simple_expr_prime .

    $default  reduce using rule 68 (simple_expr)


State 75

   70 simple_expr_prime: add_operator . term simple_expr_prime

    INTEGER         shift, and go to state 35
    ID              shift, and go to state 36
    LP              shift, and go to state 37
    NOT             shift, and go to state 39
    STRING_LITERAL  shift, and go to state 40

    call          go to state 41
    term          go to state 98
    factor        go to state 45
    variable      go to state 46
    literal       go to state 47
    real_literal  go to state 48


State 76

   73 term_prime: MULOP . factor term_prime

    INTEGER         shift, and go to state 35
    ID              shift, and go to state 36
    LP              shift, and go to state 37
    NOT             shift, and go to state 39
    STRING_LITERAL  shift, and go to state 40

    call          go to state 41
    factor        go to state 99
    variable      go to state 46
    literal       go to state 47
    real_literal  go to state 48


State 77

   72 term: factor term_prime .

    $default  reduce using rule 72 (term)


State 78

   53 read_statement: READ LP $@15 . variable read_statement_prime RP

    ID  shift, and go to state 100

    variable  go to state 101


State 79

   57 write_statement: WRITELN LP $@16 . arguments RP

    INTEGER         shift, and go to state 35
    ID              shift, and go to state 36
    LP              shift, and go to state 37
    ADDOP           shift, and go to state 38
    NOT             shift, and go to state 39
    STRING_LITERAL  shift, and go to state 40

    $default  reduce using rule 47 (arguments)

    call          go to state 41
    arguments     go to state 102
    expr          go to state 89
    simple_expr   go to state 43
    term          go to state 44
    factor        go to state 45
    variable      go to state 46
    literal       go to state 47
    real_literal  go to state 48


State 80

   59 assert_statement: ASSERT LP $@17 . expr RP

    INTEGER         shift, and go to state 35
    ID              shift, and go to state 36
    LP              shift, and go to state 37
    ADDOP           shift, and go to state 38
    NOT             shift, and go to state 39
    STRING_LITERAL  shift, and go to state 40

    call          go to state 41
    expr          go to state 103
    simple_expr   go to state 43
    term          go to state 44
    factor        go to state 45
    variable      go to state 46
    literal       go to state 47
    real_literal  go to state 48


State 81

   29 block_prime: SEMICOLON statement . block_prime

    SEMICOLON  shift, and go to state 52

    $default  reduce using rule 31 (block_prime)

    block_prime  go to state 104


State 82

   28 block: BEG statement block_prime END .

    $default  reduce using rule 28 (block)


State 83

   63 if_statement: IF expr . THEN statement
   64             | IF expr . THEN statement ELSE statement

    THEN  shift, and go to state 105


State 84

   65 while_statement: WHILE expr . DO statement

    DO  shift, and go to state 106


State 85

   42 assignment_statement: variable ASSGN expr .

    $default  reduce using rule 42 (assignment_statement)


State 86

   15 declaration: FUNC $@8 ID LP . $@9 parameters RP $@10 COLON type SEMICOLON $@11 block

    $default  reduce using rule 12 ($@9)

    $@9  go to state 107


State 87

   10 declaration: PROC $@4 ID LP . $@5 parameters RP $@6 SEMICOLON $@7 block

    $default  reduce using rule 7 ($@5)

    $@5  go to state 108


State 88

   45 call: ID LP $@13 arguments . $@14 RP

    $default  reduce using rule 44 ($@14)

    $@14  go to state 109


State 89

   46 arguments: expr . arguments_prime

    COMMA  shift, and go to state 110

    $default  reduce using rule 49 (arguments_prime)

    arguments_prime  go to state 111


State 90

   82 variable: ID LS expr RS .

    $default  reduce using rule 82 (variable)


State 91

   16 declaration_prime: COMMA . ID declaration_prime

    ID  shift, and go to state 112


State 92

    5 declaration: VAR $@3 ID declaration_prime . COLON type

    COLON  shift, and go to state 113


State 93

   88 real_literal: INTEGER PERIOD INTEGER .
   89             | INTEGER PERIOD INTEGER . "e" INTEGER
   90             | INTEGER PERIOD INTEGER . "e" ADDOP INTEGER

    "e"  shift, and go to state 114

    $default  reduce using rule 88 (real_literal)


State 94

   80 factor: ID PERIOD SIZE .

    $default  reduce using rule 80 (factor)


State 95

   78 factor: LP expr RP .

    $default  reduce using rule 78 (factor)


State 96

   69 simple_expr: ADDOP term simple_expr_prime .

    $default  reduce using rule 69 (simple_expr)


State 97

   67 expr: simple_expr RELOP simple_expr .

    $default  reduce using rule 67 (expr)


State 98

   70 simple_expr_prime: add_operator term . simple_expr_prime

    ADDOP  shift, and go to state 72
    OR     shift, and go to state 73

    $default  reduce using rule 71 (simple_expr_prime)

    simple_expr_prime  go to state 115
    add_operator       go to state 75


State 99

   73 term_prime: MULOP factor . term_prime

    MULOP  shift, and go to state 76

    $default  reduce using rule 74 (term_prime)

    term_prime  go to state 116


State 100

   81 variable: ID .
   82         | ID . LS expr RS

    LS  shift, and go to state 33

    $default  reduce using rule 81 (variable)


State 101

   53 read_statement: READ LP $@15 variable . read_statement_prime RP

    COMMA  shift, and go to state 117

    $default  reduce using rule 55 (read_statement_prime)

    read_statement_prime  go to state 118


State 102

   57 write_statement: WRITELN LP $@16 arguments . RP

    RP  shift, and go to state 119


State 103

   59 assert_statement: ASSERT LP $@17 expr . RP

    RP  shift, and go to state 120


State 104

   29 block_prime: SEMICOLON statement block_prime .

    $default  reduce using rule 29 (block_prime)


State 105

   63 if_statement: IF expr THEN . statement
   64             | IF expr THEN . statement ELSE statement

    FUNC     shift, and go to state 10
    PROC     shift, and go to state 11
    ID       shift, and go to state 12
    VAR      shift, and go to state 13
    RETURN   shift, and go to state 14
    READ     shift, and go to state 15
    WRITELN  shift, and go to state 16
    ASSERT   shift, and go to state 17

    $default  reduce using rule 32 ($@12)

    declaration           go to state 18
    statement             go to state 121
    $@12                  go to state 20
    simple_statement      go to state 21
    assignment_statement  go to state 22
    call                  go to state 23
    return_statement      go to state 24
    read_statement        go to state 25
    write_statement       go to state 26
    assert_statement      go to state 27
    variable              go to state 28


State 106

   65 while_statement: WHILE expr DO . statement

    FUNC     shift, and go to state 10
    PROC     shift, and go to state 11
    ID       shift, and go to state 12
    VAR      shift, and go to state 13
    RETURN   shift, and go to state 14
    READ     shift, and go to state 15
    WRITELN  shift, and go to state 16
    ASSERT   shift, and go to state 17

    $default  reduce using rule 32 ($@12)

    declaration           go to state 18
    statement             go to state 122
    $@12                  go to state 20
    simple_statement      go to state 21
    assignment_statement  go to state 22
    call                  go to state 23
    return_statement      go to state 24
    read_statement        go to state 25
    write_statement       go to state 26
    assert_statement      go to state 27
    variable              go to state 28


State 107

   15 declaration: FUNC $@8 ID LP $@9 . parameters RP $@10 COLON type SEMICOLON $@11 block

    ID   shift, and go to state 123
    VAR  shift, and go to state 124

    $default  reduce using rule 20 (parameters)

    parameters  go to state 125


State 108

   10 declaration: PROC $@4 ID LP $@5 . parameters RP $@6 SEMICOLON $@7 block

    ID   shift, and go to state 123
    VAR  shift, and go to state 124

    $default  reduce using rule 20 (parameters)

    parameters  go to state 126


State 109

   45 call: ID LP $@13 arguments $@14 . RP

    RP  shift, and go to state 127


State 110

   48 arguments_prime: COMMA . expr arguments_prime

    INTEGER         shift, and go to state 35
    ID              shift, and go to state 36
    LP              shift, and go to state 37
    ADDOP           shift, and go to state 38
    NOT             shift, and go to state 39
    STRING_LITERAL  shift, and go to state 40

    call          go to state 41
    expr          go to state 128
    simple_expr   go to state 43
    term          go to state 44
    factor        go to state 45
    variable      go to state 46
    literal       go to state 47
    real_literal  go to state 48


State 111

   46 arguments: expr arguments_prime .

    $default  reduce using rule 46 (arguments)


State 112

   16 declaration_prime: COMMA ID . declaration_prime

    COMMA  shift, and go to state 91

    $default  reduce using rule 17 (declaration_prime)

    declaration_prime  go to state 129


State 113

    5 declaration: VAR $@3 ID declaration_prime COLON . type

    ARR       shift, and go to state 130
    DATATYPE  shift, and go to state 131

    type        go to state 132
    array_type  go to state 133


State 114

   89 real_literal: INTEGER PERIOD INTEGER "e" . INTEGER
   90             | INTEGER PERIOD INTEGER "e" . ADDOP INTEGER

    INTEGER  shift, and go to state 134
    ADDOP    shift, and go to state 135


State 115

   70 simple_expr_prime: add_operator term simple_expr_prime .

    $default  reduce using rule 70 (simple_expr_prime)


State 116

   73 term_prime: MULOP factor term_prime .

    $default  reduce using rule 73 (term_prime)


State 117

   54 read_statement_prime: COMMA . variable read_statement_prime

    ID  shift, and go to state 100

    variable  go to state 136


State 118

   53 read_statement: READ LP $@15 variable read_statement_prime . RP

    RP  shift, and go to state 137


State 119

   57 write_statement: WRITELN LP $@16 arguments RP .

    $default  reduce using rule 57 (write_statement)


State 120

   59 assert_statement: ASSERT LP $@17 expr RP .

    $default  reduce using rule 59 (assert_statement)


State 121

   63 if_statement: IF expr THEN statement .
   64             | IF expr THEN statement . ELSE statement

    ELSE  shift, and go to state 138

    ELSE      [reduce using rule 63 (if_statement)]
    $default  reduce using rule 63 (if_statement)


State 122

   65 while_statement: WHILE expr DO statement .

    $default  reduce using rule 65 (while_statement)


State 123

   18 parameters: ID . COLON type parameters_prime

    COLON  shift, and go to state 139


State 124

   19 parameters: VAR . ID COLON type parameters_prime

    ID  shift, and go to state 140


State 125

   15 declaration: FUNC $@8 ID LP $@9 parameters . RP $@10 COLON type SEMICOLON $@11 block

    RP  shift, and go to state 141


State 126

   10 declaration: PROC $@4 ID LP $@5 parameters . RP $@6 SEMICOLON $@7 block

    RP  shift, and go to state 142


State 127

   45 call: ID LP $@13 arguments $@14 RP .

    $default  reduce using rule 45 (call)


State 128

   48 arguments_prime: COMMA expr . arguments_prime

    COMMA  shift, and go to state 110

    $default  reduce using rule 49 (arguments_prime)

    arguments_prime  go to state 143


State 129

   16 declaration_prime: COMMA ID declaration_prime .

    $default  reduce using rule 16 (declaration_prime)


State 130

   26 array_type: ARR . LS RS OF DATATYPE
   27           | ARR . LS expr RS OF DATATYPE

    LS  shift, and go to state 144


State 131

   24 type: DATATYPE .

    $default  reduce using rule 24 (type)


State 132

    5 declaration: VAR $@3 ID declaration_prime COLON type .

    $default  reduce using rule 5 (declaration)


State 133

   25 type: array_type .

    $default  reduce using rule 25 (type)


State 134

   89 real_literal: INTEGER PERIOD INTEGER "e" INTEGER .

    $default  reduce using rule 89 (real_literal)


State 135

   90 real_literal: INTEGER PERIOD INTEGER "e" ADDOP . INTEGER

    INTEGER  shift, and go to state 145


State 136

   54 read_statement_prime: COMMA variable . read_statement_prime

    COMMA  shift, and go to state 117

    $default  reduce using rule 55 (read_statement_prime)

    read_statement_prime  go to state 146


State 137

   53 read_statement: READ LP $@15 variable read_statement_prime RP .

    $default  reduce using rule 53 (read_statement)


State 138

   64 if_statement: IF expr THEN statement ELSE . statement

    FUNC     shift, and go to state 10
    PROC     shift, and go to state 11
    ID       shift, and go to state 12
    VAR      shift, and go to state 13
    RETURN   shift, and go to state 14
    READ     shift, and go to state 15
    WRITELN  shift, and go to state 16
    ASSERT   shift, and go to state 17

    $default  reduce using rule 32 ($@12)

    declaration           go to state 18
    statement             go to state 147
    $@12                  go to state 20
    simple_statement      go to state 21
    assignment_statement  go to state 22
    call                  go to state 23
    return_statement      go to state 24
    read_statement        go to state 25
    write_statement       go to state 26
    assert_statement      go to state 27
    variable              go to state 28


State 139

   18 parameters: ID COLON . type parameters_prime

    ARR       shift, and go to state 130
    DATATYPE  shift, and go to state 131

    type        go to state 148
    array_type  go to state 133


State 140

   19 parameters: VAR ID . COLON type parameters_prime

    COLON  shift, and go to state 149


State 141

   15 declaration: FUNC $@8 ID LP $@9 parameters RP . $@10 COLON type SEMICOLON $@11 block

    $default  reduce using rule 13 ($@10)

    $@10  go to state 150


State 142

   10 declaration: PROC $@4 ID LP $@5 parameters RP . $@6 SEMICOLON $@7 block

    $default  reduce using rule 8 ($@6)

    $@6  go to state 151


State 143

   48 arguments_prime: COMMA expr arguments_prime .

    $default  reduce using rule 48 (arguments_prime)


State 144

   26 array_type: ARR LS . RS OF DATATYPE
   27           | ARR LS . expr RS OF DATATYPE

    INTEGER         shift, and go to state 35
    ID              shift, and go to state 36
    LP              shift, and go to state 37
    RS              shift, and go to state 152
    ADDOP           shift, and go to state 38
    NOT             shift, and go to state 39
    STRING_LITERAL  shift, and go to state 40

    call          go to state 41
    expr          go to state 153
    simple_expr   go to state 43
    term          go to state 44
    factor        go to state 45
    variable      go to state 46
    literal       go to state 47
    real_literal  go to state 48


State 145

   90 real_literal: INTEGER PERIOD INTEGER "e" ADDOP INTEGER .

    $default  reduce using rule 90 (real_literal)


State 146

   54 read_statement_prime: COMMA variable read_statement_prime .

    $default  reduce using rule 54 (read_statement_prime)


State 147

   64 if_statement: IF expr THEN statement ELSE statement .

    $default  reduce using rule 64 (if_statement)


State 148

   18 parameters: ID COLON type . parameters_prime

    COMMA  shift, and go to state 154

    $default  reduce using rule 23 (parameters_prime)

    parameters_prime  go to state 155


State 149

   19 parameters: VAR ID COLON . type parameters_prime

    ARR       shift, and go to state 130
    DATATYPE  shift, and go to state 131

    type        go to state 156
    array_type  go to state 133


State 150

   15 declaration: FUNC $@8 ID LP $@9 parameters RP $@10 . COLON type SEMICOLON $@11 block

    COLON  shift, and go to state 157


State 151

   10 declaration: PROC $@4 ID LP $@5 parameters RP $@6 . SEMICOLON $@7 block

    SEMICOLON  shift, and go to state 158


State 152

   26 array_type: ARR LS RS . OF DATATYPE

    OF  shift, and go to state 159


State 153

   27 array_type: ARR LS expr . RS OF DATATYPE

    RS  shift, and go to state 160


State 154

   21 parameters_prime: COMMA . ID COLON type
   22                 | COMMA . VAR ID COLON type

    ID   shift, and go to state 161
    VAR  shift, and go to state 162


State 155

   18 parameters: ID COLON type parameters_prime .

    $default  reduce using rule 18 (parameters)


State 156

   19 parameters: VAR ID COLON type . parameters_prime

    COMMA  shift, and go to state 154

    $default  reduce using rule 23 (parameters_prime)

    parameters_prime  go to state 163


State 157

   15 declaration: FUNC $@8 ID LP $@9 parameters RP $@10 COLON . type SEMICOLON $@11 block

    ARR       shift, and go to state 130
    DATATYPE  shift, and go to state 131

    type        go to state 164
    array_type  go to state 133


State 158

   10 declaration: PROC $@4 ID LP $@5 parameters RP $@6 SEMICOLON . $@7 block

    $default  reduce using rule 9 ($@7)

    $@7  go to state 165


State 159

   26 array_type: ARR LS RS OF . DATATYPE

    DATATYPE  shift, and go to state 166


State 160

   27 array_type: ARR LS expr RS . OF DATATYPE

    OF  shift, and go to state 167


State 161

   21 parameters_prime: COMMA ID . COLON type

    COLON  shift, and go to state 168


State 162

   22 parameters_prime: COMMA VAR . ID COLON type

    ID  shift, and go to state 169


State 163

   19 parameters: VAR ID COLON type parameters_prime .

    $default  reduce using rule 19 (parameters)


State 164

   15 declaration: FUNC $@8 ID LP $@9 parameters RP $@10 COLON type . SEMICOLON $@11 block

    SEMICOLON  shift, and go to state 170


State 165

   10 declaration: PROC $@4 ID LP $@5 parameters RP $@6 SEMICOLON $@7 . block

    BEG  shift, and go to state 8

    block  go to state 171


State 166

   26 array_type: ARR LS RS OF DATATYPE .

    $default  reduce using rule 26 (array_type)


State 167

   27 array_type: ARR LS expr RS OF . DATATYPE

    DATATYPE  shift, and go to state 172


State 168

   21 parameters_prime: COMMA ID COLON . type

    ARR       shift, and go to state 130
    DATATYPE  shift, and go to state 131

    type        go to state 173
    array_type  go to state 133


State 169

   22 parameters_prime: COMMA VAR ID . COLON type

    COLON  shift, and go to state 174


State 170

   15 declaration: FUNC $@8 ID LP $@9 parameters RP $@10 COLON type SEMICOLON . $@11 block

    $default  reduce using rule 14 ($@11)

    $@11  go to state 175


State 171

   10 declaration: PROC $@4 ID LP $@5 parameters RP $@6 SEMICOLON $@7 block .

    $default  reduce using rule 10 (declaration)


State 172

   27 array_type: ARR LS expr RS OF DATATYPE .

    $default  reduce using rule 27 (array_type)


State 173

   21 parameters_prime: COMMA ID COLON type .

    $default  reduce using rule 21 (parameters_prime)


State 174

   22 parameters_prime: COMMA VAR ID COLON . type

    ARR       shift, and go to state 130
    DATATYPE  shift, and go to state 131

    type        go to state 176
    array_type  go to state 133


State 175

   15 declaration: FUNC $@8 ID LP $@9 parameters RP $@10 COLON type SEMICOLON $@11 . block

    BEG  shift, and go to state 8

    block  go to state 177


State 176

   22 parameters_prime: COMMA VAR ID COLON type .

    $default  reduce using rule 22 (parameters_prime)


State 177

   15 declaration: FUNC $@8 ID LP $@9 parameters RP $@10 COLON type SEMICOLON $@11 block .

    $default  reduce using rule 15 (declaration)
